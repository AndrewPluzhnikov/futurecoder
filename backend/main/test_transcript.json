[
    {
        "page": "Introducing The Shell",
        "program": [
            "'literally anything'"
        ],
        "response": {
            "message": "<p>Awesome, you're trying out your own experiments!\nThat's a great sign. Keep it up.\nJust letting you know that you do need to eventually type <code>1+2</code> for the book to move forward.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "'literally anything'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 0,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 0
            }
        },
        "step": "first_expression"
    },
    {
        "page": "Introducing The Shell",
        "program": [
            "1+2"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "3"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 0,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "first_expression"
    },
    {
        "page": "Introducing The Shell",
        "program": [
            "3 x 4"
        ],
        "response": {
            "message": "<p>I see an 'x'. If you're trying to multiply, use an asterisk, e.g:</p>\n\n<pre><code>3 * 4\n</code></pre>",
            "result": [
                {
                    "color": "red",
                    "text": "  File \"<console>\", line 1"
                },
                {
                    "color": "red",
                    "text": "    3 x 4"
                },
                {
                    "color": "red",
                    "text": "      ^"
                },
                {
                    "color": "red",
                    "text": "SyntaxError: invalid syntax"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 0,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "more_calculation"
    },
    {
        "page": "Introducing The Shell",
        "program": [
            "5 - 6"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "-1"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 0,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "more_calculation"
    },
    {
        "page": "Introducing Strings",
        "program": [
            "'hello'"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'hello'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 2,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "hello_string"
    },
    {
        "page": "Adding Strings",
        "program": [
            "'hello' + 'world'"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'helloworld'"
                }
            ],
            "state": {
                "hints": [
                    "<p>A space is a character just like any other, like <code>o</code> or <code>w</code>.</p>",
                    "<p>The space character must be somewhere inside quotes.</p>"
                ],
                "page_index": 3,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "hello_world_concat"
    },
    {
        "page": "Adding Strings",
        "program": [
            "'hello world'"
        ],
        "response": {
            "message": "<p>You must still add two or more strings together.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "'hello world'"
                }
            ],
            "state": {
                "hints": [
                    "<p>A space is a character just like any other, like <code>o</code> or <code>w</code>.</p>",
                    "<p>The space character must be somewhere inside quotes.</p>"
                ],
                "page_index": 3,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "hello_world_space"
    },
    {
        "page": "Adding Strings",
        "program": [
            "'hello ' + 'world'"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'hello world'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 3,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "hello_world_space"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "word = 'Hello'"
        ],
        "response": {
            "message": "",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 4,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "word_assign"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "word"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'Hello'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 4,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "word_check"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "'word'"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'word'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 4,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "word_string_check"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "sunshine"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "red",
                    "text": "Traceback (most recent call last):"
                },
                {
                    "color": "red",
                    "text": "  File \"<console>\", line 1, in <module>"
                },
                {
                    "color": "red",
                    "text": "NameError: name 'sunshine' is not defined"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 4,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "sunshine_undefined_check"
    },
    {
        "page": "Using Variables",
        "program": [
            "foo = 3"
        ],
        "response": {
            "message": "<p>Put <code>name</code> before the <code>=</code> to create a variable called <code>name</code>.</p>",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 0
            }
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables",
        "program": [
            "name = ''"
        ],
        "response": {
            "message": "<p>For this exercise, choose a non-empty string</p>",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 0
            }
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables",
        "program": [
            "name = 3"
        ],
        "response": {
            "message": "<p>You've got the <code>name =</code> part right, now put a string (use quotes) on the right of the <code>=</code>.</p>",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 0
            }
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables",
        "program": [
            "name = ' Alex'"
        ],
        "response": {
            "message": "<p>For this exercise, choose a name that doesn't start with a space.</p>",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 0
            }
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables",
        "program": [
            "name = 'Alex'"
        ],
        "response": {
            "message": "",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables",
        "program": [
            "'Hello ' + name"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'Hello Alex'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "hello_plus_name"
    },
    {
        "page": "Using Variables",
        "program": [
            "word + name"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'HelloAlex'"
                }
            ],
            "state": {
                "hints": [
                    "<p>You will need to use <code>+</code> twice, like 1+2+3.</p>",
                    "<p>Your answer should contain a mixture of variables (no quotes) and string literals (quotes).</p>",
                    "<p>You will need to have a space character inside quotes.</p>"
                ],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "word_plus_name"
    },
    {
        "page": "Using Variables",
        "program": [
            "word + ' ' + name"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'Hello Alex'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "word_plus_name_with_space"
    },
    {
        "page": "Using Variables",
        "program": [
            "word = 'Goodbye'"
        ],
        "response": {
            "message": "",
            "result": [],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 5
            }
        },
        "step": "word_assign_goodbye"
    },
    {
        "page": "Using Variables",
        "program": [
            "word + ' ' + name"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "'Goodbye Alex'"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 6
            }
        },
        "step": "goodbye_plus_name"
    },
    {
        "page": "Using Variables",
        "program": [
            "print(word + ' ' + name)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Goodbye Alex"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 5,
                "showEditor": false,
                "showSnoop": false,
                "step_index": 7
            }
        },
        "step": "first_print"
    },
    {
        "page": "Writing Programs",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "print(word + ' ' + name)",
            "word = 'Goodbye'",
            "print(word + ' ' + name)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello World"
                },
                {
                    "color": "white",
                    "text": "Goodbye World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 6,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "editor_hello_world"
    },
    {
        "page": "Storing Calculations In Variables",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "sentence = word + ' ' + name",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 7,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "sentence_equals_word_plus_name"
    },
    {
        "page": "Storing Calculations In Variables",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "sentence = word + ' ' + name",
            "print(sentence)",
            "word = 'Goodbye'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello World"
                },
                {
                    "color": "white",
                    "text": "Hello World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 7,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "sentence_doesnt_change"
    },
    {
        "page": "Introducing For Loops",
        "program": [
            "name = 'World'",
            "for character in name: print(character)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "o"
                },
                {
                    "color": "white",
                    "text": "r"
                },
                {
                    "color": "white",
                    "text": "l"
                },
                {
                    "color": "white",
                    "text": "d"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 8,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "first_for_loop"
    },
    {
        "page": "Indentation",
        "program": [
            "for character in name:",
            "print(character)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "red",
                    "text": "  File \"my_program.py\", line 2"
                },
                {
                    "color": "red",
                    "text": "    print(character)"
                },
                {
                    "color": "red",
                    "text": "    ^"
                },
                {
                    "color": "red",
                    "text": "IndentationError: expected an indented block"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 9,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "missing_indentation"
    },
    {
        "page": "Indentation",
        "program": [
            "name = 'World'",
            "",
            "for character in name:",
            "    print(character)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "---"
                },
                {
                    "color": "white",
                    "text": "o"
                },
                {
                    "color": "white",
                    "text": "---"
                },
                {
                    "color": "white",
                    "text": "r"
                },
                {
                    "color": "white",
                    "text": "---"
                },
                {
                    "color": "white",
                    "text": "l"
                },
                {
                    "color": "white",
                    "text": "---"
                },
                {
                    "color": "white",
                    "text": "d"
                },
                {
                    "color": "white",
                    "text": "---"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 9,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "two_indented_lines"
    },
    {
        "page": "Indentation",
        "program": [
            "name = 'World'",
            "",
            "for character in name:",
            "    print(character)",
            "print('---')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "o"
                },
                {
                    "color": "white",
                    "text": "r"
                },
                {
                    "color": "white",
                    "text": "l"
                },
                {
                    "color": "white",
                    "text": "d"
                },
                {
                    "color": "white",
                    "text": "---"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 9,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "one_indented_line"
    },
    {
        "page": "Indentation",
        "program": [
            "for character in name:",
            "    print(character)",
            "  print('---')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "red",
                    "text": "  File \"my_program.py\", line 3"
                },
                {
                    "color": "red",
                    "text": "    print('---')"
                },
                {
                    "color": "red",
                    "text": "               ^"
                },
                {
                    "color": "red",
                    "text": "IndentationError: unindent does not match any outer indentation level"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 9,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "mismatched_indentations"
    },
    {
        "page": "Basic For Loop Exercises",
        "program": [
            "name = 'World'",
            "for character in name:",
            "    print('---' + character)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "---W"
                },
                {
                    "color": "white",
                    "text": "---o"
                },
                {
                    "color": "white",
                    "text": "---r"
                },
                {
                    "color": "white",
                    "text": "---l"
                },
                {
                    "color": "white",
                    "text": "---d"
                }
            ],
            "state": {
                "hints": [
                    "<p>Forget loops for a moment. How would you write a program which prints <code>name</code> 3 times?</p>",
                    "<p>The solution looks very similar to the other programs we've seen in this section.</p>",
                    "<p>The for loop will create a variable such as <code>character</code>, but the program doesn't need to use it.</p>"
                ],
                "page_index": 10,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "loop_exercise_1"
    },
    {
        "page": "Basic For Loop Exercises",
        "program": [
            "name = 'World'",
            "for _ in name:",
            "    print(name)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "World"
                },
                {
                    "color": "white",
                    "text": "World"
                },
                {
                    "color": "white",
                    "text": "World"
                },
                {
                    "color": "white",
                    "text": "World"
                },
                {
                    "color": "white",
                    "text": "World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 10,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "loop_exercise_2"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "hello = 'Hello'",
            "print(hello)",
            "hello = hello + '!'",
            "print(hello)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello"
                },
                {
                    "color": "white",
                    "text": "Hello!"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 11,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "hello_plus_equals"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = line + char",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "Wo"
                },
                {
                    "color": "white",
                    "text": "Wor"
                },
                {
                    "color": "white",
                    "text": "Worl"
                },
                {
                    "color": "white",
                    "text": "World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 11,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "name_triangle"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    print(line)",
            "    line = line + char"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": " "
                },
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "Wo"
                },
                {
                    "color": "white",
                    "text": "Wor"
                },
                {
                    "color": "white",
                    "text": "Worl"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 11,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "name_triangle_missing_last_line"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = line + char + ' '",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W "
                },
                {
                    "color": "white",
                    "text": "W o "
                },
                {
                    "color": "white",
                    "text": "W o r "
                },
                {
                    "color": "white",
                    "text": "W o r l "
                },
                {
                    "color": "white",
                    "text": "W o r l d "
                }
            ],
            "state": {
                "hints": [
                    "<p>The solution is very similar to the original triangle program, just make one small change.</p>",
                    "<p>You still want to add one character to <code>line</code> at a time, it's just a question of where you add it.</p>",
                    "<p>You want the lines to be reversed, so you need to reverse/flip something.</p>",
                    "<p>You need to add the character before the string, instead of after.</p>",
                    "<p>3 + 7 is equal to 7 + 3. Same for all numbers. Is this also true for strings?</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "name_triangle_spaced"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = char + line",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "W"
                },
                {
                    "color": "white",
                    "text": "oW"
                },
                {
                    "color": "white",
                    "text": "roW"
                },
                {
                    "color": "white",
                    "text": "lroW"
                },
                {
                    "color": "white",
                    "text": "dlroW"
                }
            ],
            "state": {
                "hints": [
                    "<p>Look at the triangle program for inspiration.</p>",
                    "<p>Look at the program where you printed <code>name</code> once for each character for inspiration.</p>",
                    "<p>You will need to build up a string of dashes (<code>-</code>) one character at a time.</p>",
                    "<p>The for loop will create a variable such as <code>char</code>, but the program doesn't need to use it.</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "name_triangle_backwards"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "print(name)",
            "print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "World"
                },
                {
                    "color": "white",
                    "text": "-----"
                }
            ],
            "state": {
                "hints": [
                    "<p>You did all the hard stuff in the previous exercise. Now it's just some simple string concatenation.</p>",
                    "<p>You only need one for loop - the one used to make the line of dashes from the previous exercise.</p>",
                    "<p>Don't try and do everything at once. Break the problem up into smaller, easier subproblems.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>-----\nWorld\n-----\n</code></pre>",
                    "<p>Since you need to output three separate lines of text, you will need to call <code>print()</code> three times.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>| World |\n</code></pre>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>+-----+\n|World|\n+-----+\n</code></pre>\n<p>(i.e. no spaces around <code>World</code>)</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "name_underlined"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+' + line + '+'",
            "print(line)",
            "print('|' + name + '|')",
            "print(line)"
        ],
        "response": {
            "message": "<p>You're almost there! Just add a few more characters to your strings.\nYour loop is perfect.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "+-----+"
                },
                {
                    "color": "white",
                    "text": "|World|"
                },
                {
                    "color": "white",
                    "text": "+-----+"
                }
            ],
            "state": {
                "hints": [
                    "<p>You did all the hard stuff in the previous exercise. Now it's just some simple string concatenation.</p>",
                    "<p>You only need one for loop - the one used to make the line of dashes from the previous exercise.</p>",
                    "<p>Don't try and do everything at once. Break the problem up into smaller, easier subproblems.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>-----\nWorld\n-----\n</code></pre>",
                    "<p>Since you need to output three separate lines of text, you will need to call <code>print()</code> three times.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>| World |\n</code></pre>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>+-----+\n|World|\n+-----+\n</code></pre>\n<p>(i.e. no spaces around <code>World</code>)</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "name_box"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+-' + line + '-+'",
            "print(line)",
            "print('| ' + name + ' |')",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+-' + line + '-+'",
            "print(line)"
        ],
        "response": {
            "message": "<p>Well done, this solution is correct! However, it can be improved.\nYou only need to use one loop - using more is inefficient.\nYou can reuse the variable containing the line of <code>-</code> and <code>+</code>.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "+-------+"
                },
                {
                    "color": "white",
                    "text": "| World |"
                },
                {
                    "color": "white",
                    "text": "+-------+"
                }
            ],
            "state": {
                "hints": [
                    "<p>You did all the hard stuff in the previous exercise. Now it's just some simple string concatenation.</p>",
                    "<p>You only need one for loop - the one used to make the line of dashes from the previous exercise.</p>",
                    "<p>Don't try and do everything at once. Break the problem up into smaller, easier subproblems.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>-----\nWorld\n-----\n</code></pre>",
                    "<p>Since you need to output three separate lines of text, you will need to call <code>print()</code> three times.</p>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>| World |\n</code></pre>",
                    "<p>Try writing a program that outputs:</p>\n<pre><code>+-----+\n|World|\n+-----+\n</code></pre>\n<p>(i.e. no spaces around <code>World</code>)</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "name_box"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+-' + line + '-+'",
            "print(line)",
            "print('| ' + name + ' |')",
            "print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "+-------+"
                },
                {
                    "color": "white",
                    "text": "| World |"
                },
                {
                    "color": "white",
                    "text": "+-------+"
                }
            ],
            "state": {
                "hints": [
                    "<p>You will need two separate for loops over <code>name</code>.</p>",
                    "<p>Each line except for the first and last has the same characters in the middle. That means you can reuse something.</p>",
                    "<p>Create a variable containing the spaces in the middle and use it many times.</p>",
                    "<p>Use one loop to create a bunch of spaces, and a second loop to print a bunch of lines using the previously created spaces.</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "name_box"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = '+' + name + '+'",
            "print(line)",
            "for char in name:",
            "    inner_line = char",
            "    for _ in name:",
            "        inner_line += ' '",
            "    inner_line += char",
            "    print(inner_line)",
            "print(line)"
        ],
        "response": {
            "message": "<p>Well done, this solution is correct!\nAnd you used a nested loop (a loop inside a loop) which we haven't even covered yet!\nHowever, in this case a nested loop is inefficient.\nYou can make a variable containing spaces and reuse that in each line.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "+World+"
                },
                {
                    "color": "white",
                    "text": "W     W"
                },
                {
                    "color": "white",
                    "text": "o     o"
                },
                {
                    "color": "white",
                    "text": "r     r"
                },
                {
                    "color": "white",
                    "text": "l     l"
                },
                {
                    "color": "white",
                    "text": "d     d"
                },
                {
                    "color": "white",
                    "text": "+World+"
                }
            ],
            "state": {
                "hints": [
                    "<p>You will need two separate for loops over <code>name</code>.</p>",
                    "<p>Each line except for the first and last has the same characters in the middle. That means you can reuse something.</p>",
                    "<p>Create a variable containing the spaces in the middle and use it many times.</p>",
                    "<p>Use one loop to create a bunch of spaces, and a second loop to print a bunch of lines using the previously created spaces.</p>"
                ],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "name_box_2"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = '+' + name + '+'",
            "spaces = ''",
            "for _ in name:",
            "    spaces += ' '",
            "",
            "print(line)",
            "for char in name:",
            "    print(char + spaces + char)",
            "print(line)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "+World+"
                },
                {
                    "color": "white",
                    "text": "W     W"
                },
                {
                    "color": "white",
                    "text": "o     o"
                },
                {
                    "color": "white",
                    "text": "r     r"
                },
                {
                    "color": "white",
                    "text": "l     l"
                },
                {
                    "color": "white",
                    "text": "d     d"
                },
                {
                    "color": "white",
                    "text": "+World+"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 12,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 5
            }
        },
        "step": "name_box_2"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "condition = True",
            "print(condition)",
            "condition = False",
            "print(condition)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "True"
                },
                {
                    "color": "white",
                    "text": "False"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 14,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "introducing_booleans"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "if True:",
            "    print('This gets printed')",
            "",
            "if False:",
            "    print('This does not')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "This gets printed"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 14,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 2
            }
        },
        "step": "first_if_statements"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "if excited:",
            "    sentence += '!'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello World!"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 14,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 3
            }
        },
        "step": "excited_example"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "if excited:",
            "    sentence += '!'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello World"
                }
            ],
            "state": {
                "hints": [
                    "<p>You only need to add a few lines to the existing program. All the existing code should be left as is.</p>",
                    "<p>The code that you add should be very similar to the existing code.</p>"
                ],
                "page_index": 14,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 4
            }
        },
        "step": "excited_false_example"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello'",
            "excited = True",
            "confused = True",
            "if excited:",
            "    sentence += '!'",
            "if confused:",
            "    sentence += '?'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello!?"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 14,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 5
            }
        },
        "step": "excited_confused_exercise"
    },
    {
        "page": "Combining Compound Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "",
            "if excited:",
            "    new_sentence = ''",
            "    for char in sentence:",
            "        new_sentence += char",
            "        new_sentence += '!'",
            "    sentence = new_sentence",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "H!e!l!l!o! !W!o!r!l!d!"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 15,
                "showEditor": true,
                "showSnoop": false,
                "step_index": 1
            }
        },
        "step": "for_inside_if"
    },
    {
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello World'",
            "",
            "include = False",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = True",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "ello World"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 16,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 1
            }
        },
        "step": "print_tail"
    },
    {
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello World'",
            "",
            "include = False",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = True",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | sentence \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello World\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   3\u001b[0m | include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mFalse\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   4\u001b[0m | new_sentence \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mH\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mel\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mell\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m \u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello \u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mW\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello W\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wo\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mr\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wor\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Worl\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186md\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello World\u001b[39m\u001b[38;5;186m'\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:"
                },
                {
                    "color": "white",
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m  10\u001b[0m | print(new_sentence)"
                },
                {
                    "color": "white",
                    "text": "ello World"
                }
            ],
            "state": {
                "hints": [
                    "<p>The code should be almost exactly the same, just make a couple of small changes.</p>",
                    "<p>Make sure that the code inside <code>if include:</code> runs at the beginning of the loop, in the first iteration.</p>",
                    "<p>That means <code>include</code> should be <code>True</code> at that point.</p>",
                    "<p>Make sure that the code inside <code>if include:</code> <em>doesn't</em> run after the first iteration.</p>",
                    "<p>That means <code>include</code> should be <code>False</code> after the first iteration.</p>"
                ],
                "page_index": 16,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 2
            }
        },
        "step": "print_tail_snoop"
    },
    {
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello there'",
            "include = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = False",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "H"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 16,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 3
            }
        },
        "step": "print_first_character"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "condition = True",
            "if condition:",
            "    print('Yes')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Yes"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 1
            }
        },
        "step": "first_if_else"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "condition = False",
            "if condition:",
            "    print('Yes')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "No"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 2
            }
        },
        "step": "first_if_else_false"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "if excited:",
            "    sentence = sentence.upper()",
            "else:",
            "    sentence = sentence.lower()",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "HELLO WORLD"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 3
            }
        },
        "step": "if_upper_else_lower"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "if excited:",
            "    sentence = sentence.upper()",
            "else:",
            "    sentence = sentence.lower()",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "hello world"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 4
            }
        },
        "step": "if_upper_else_lower_false"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "",
            "if excited:",
            "    char = '!'",
            "sentence += char",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "red",
                    "text": "NameError: name 'char' is not defined"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 5
            }
        },
        "step": "undefined_char"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello there'",
            "excited = True",
            "if excited:",
            "    char = '!'",
            "else:",
            "    char = '.'",
            "sentence += char",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello there!"
                }
            ],
            "state": {
                "hints": [
                    "<p>You've learned all the tools you need for this. I believe in you! Look at previous programs for inspiration.</p>",
                    "<p>You will need a loop to build up the new sentence character by character.</p>",
                    "<p>You will need an <code>if/else</code> to choose whether to add an uppercase or lowercase character.</p>",
                    "<p>Your <code>if/else</code> needs to execute different bodies depending on which iteration of the loop it's in.</p>",
                    "<p>That means that your <code>if</code> condition needs to be a variable that changes inside the loop.</p>",
                    "<p>In the first iteration you need an uppercase letter. In the following iterations you need a lowercase letter.</p>"
                ],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 6
            }
        },
        "step": "else_full_stop"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'HELLO THERE'",
            "new_sentence = ''",
            "",
            "include = True",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char.upper()",
            "    include = False",
            "",
            "include = False",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char.lower()",
            "    include = True",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "<p>Well done, this solution is correct!\nHowever, it can be improved. You only need to use one loop and one <code>if/else</code>.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "Hello there"
                }
            ],
            "state": {
                "hints": [
                    "<p>You've learned all the tools you need for this. I believe in you! Look at previous programs for inspiration.</p>",
                    "<p>You will need a loop to build up the new sentence character by character.</p>",
                    "<p>You will need an <code>if/else</code> to choose whether to add an uppercase or lowercase character.</p>",
                    "<p>Your <code>if/else</code> needs to execute different bodies depending on which iteration of the loop it's in.</p>",
                    "<p>That means that your <code>if</code> condition needs to be a variable that changes inside the loop.</p>",
                    "<p>In the first iteration you need an uppercase letter. In the following iterations you need a lowercase letter.</p>"
                ],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 6
            }
        },
        "step": "capitalise"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'HELLO THERE'",
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "    else:",
            "        char = char.lower()",
            "    new_sentence += char",
            "    upper = False",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Hello there"
                }
            ],
            "state": {
                "hints": [
                    "<p>This is similar to the previous exercise. The difference is when and where you set the condition variable.</p>",
                    "<p>You will need to have a boolean variable which changes with every iteration. </p>",
                    "<p>First write a small program which takes a boolean variable and flips it, i.e. if the variable is <code>True</code> it becomes <code>False</code> and if it starts out <code>False</code> it's changed to <code>True</code>. No loops, just an <code>if/else</code>.</p>",
                    "<p>You will need to use the variable in the <code>if</code> condition and also assign to the same variable in the body.</p>",
                    "<p>Combine that flipping <code>if/else</code> with the one that chooses an uppercase or lowercase character.</p>"
                ],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 7
            }
        },
        "step": "capitalise"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'One more exercise, and then you can relax.'",
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "    else:",
            "        char = char.lower()",
            "",
            "    if upper:",
            "        upper = False",
            "    else:",
            "        upper = True",
            "    new_sentence += char",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "<p>Well done, this solution is correct!\nHowever, it can be improved. You only need to use one loop and one <code>if/else</code>.</p>",
            "result": [
                {
                    "color": "white",
                    "text": "OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX."
                }
            ],
            "state": {
                "hints": [
                    "<p>This is similar to the previous exercise. The difference is when and where you set the condition variable.</p>",
                    "<p>You will need to have a boolean variable which changes with every iteration. </p>",
                    "<p>First write a small program which takes a boolean variable and flips it, i.e. if the variable is <code>True</code> it becomes <code>False</code> and if it starts out <code>False</code> it's changed to <code>True</code>. No loops, just an <code>if/else</code>.</p>",
                    "<p>You will need to use the variable in the <code>if</code> condition and also assign to the same variable in the body.</p>",
                    "<p>Combine that flipping <code>if/else</code> with the one that chooses an uppercase or lowercase character.</p>"
                ],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 7
            }
        },
        "step": "spongebob"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'One more exercise, and then you can relax.'",
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "        upper = False",
            "    else:",
            "        char = char.lower()",
            "        upper = True",
            "    new_sentence += char",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX."
                }
            ],
            "state": {
                "hints": [],
                "page_index": 17,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 8
            }
        },
        "step": "spongebob"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "print(1 + 2 == 3)",
            "print(4 + 5 == 6)",
            "print('ab' + 'c' == 'a' + 'bc')"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "True"
                },
                {
                    "color": "white",
                    "text": "False"
                },
                {
                    "color": "white",
                    "text": "True"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 18,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 1
            }
        },
        "step": "introducing_equality"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "print(1 + 2 = 3)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "red",
                    "text": "  File \"<console>\", line 1"
                },
                {
                    "color": "red",
                    "text": "SyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 18,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 2
            }
        },
        "step": "equality_vs_assignment"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "name = 'kesha'",
            "new_name = ''",
            "for c in name:",
            "    if c == 's':",
            "        c = '$'",
            "    new_name += c",
            "",
            "print(new_name)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "ke$ha"
                }
            ],
            "state": {
                "hints": [
                    "<p>You just need to add a few lines of code that are very similar to existing ones.</p>"
                ],
                "page_index": 18,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 3
            }
        },
        "step": "if_equals_replacing_characters"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "name = 'kesha'",
            "new_name = ''",
            "for c in name:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    new_name += c",
            "",
            "print(new_name)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "k3$h@"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 18,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 4
            }
        },
        "step": "if_equals_replacing_characters_exercise"
    },
    {
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTC'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    if char == 'T':",
            "        char = 'A'",
            "    if char == 'G':",
            "        char = 'C'",
            "    if char == 'C':",
            "        char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "AGAAGGGAG"
                }
            ],
            "state": {
                "hints": [
                    "<p>Change:</p>\n<pre><code>if char == 'A':\n    char = 'T'\nif char == 'T':\n    char = 'A'\n</code></pre>\n<p>to look like the revised snippet. It's just a small change, do it without copy-pasting.</p>",
                    "<p>Now make the same kind of change to the code swapping G and C.</p>"
                ],
                "page_index": 19,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 1
            }
        },
        "step": "dna_example"
    },
    {
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    else:",
            "        if char == 'T':",
            "            char = 'A'",
            "    if char == 'G':",
            "        char = 'C'",
            "    else:",
            "        if char == 'C':",
            "            char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "TCATCGCAGGAATCAATGTCCTACCGAATA"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 19,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 2
            }
        },
        "step": "dna_example_with_else"
    },
    {
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTC'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    elif char == 'T':",
            "        char = 'A'",
            "    elif char == 'G':",
            "        char = 'C'",
            "    elif char == 'C':",
            "        char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "TCATCGCAG"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 19,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 3
            }
        },
        "step": "dna_example_with_elif"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "1 != 2"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "True"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 1
            }
        },
        "step": "try_not_equals"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "sentence = \"The e key on my keyboard is broken\"",
            "new_sentence = ''",
            "for c in sentence:",
            "    if c != 'e':",
            "        new_sentence += c",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Th  ky on my kyboard is brokn"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 2
            }
        },
        "step": "brokn_kyboard"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "1 < 2"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "True"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 3
            }
        },
        "step": "introducing_less_than"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "'1' < '2'"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "True"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 4
            }
        },
        "step": "comparing_strings"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "percentage = 73",
            "",
            "if percentage < 20:",
            "    grade = \"F\"",
            "elif percentage < 40:",
            "    grade = \"D\"",
            "elif percentage < 60:",
            "    grade = \"C\"",
            "elif percentage < 80:",
            "    grade = \"B\"",
            "else:",
            "    grade = \"A\"",
            "",
            "print(grade)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "B"
                }
            ],
            "state": {
                "hints": [
                    "<p>Try writing a program which prints the smallest of just <code>x1</code> and <code>x2</code>.</p>",
                    "<p>All you need is a few uses of <code>&lt;</code>, <code>if</code>, and <code>else</code>.</p>",
                    "<p>You will need an <code>if</code> inside the body of an <code>if</code>.</p>",
                    "<p>You will need an <code>if</code> inside the body of an <code>else</code> (or equivalently, an <code>elif</code>).</p>"
                ],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 5
            }
        },
        "step": "grades_example"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "x1 = 'Charlie'",
            "x2 = 'Alice'",
            "x3 = 'Bob'",
            "if x1 < x2:",
            "    if x1 < x3:",
            "        first = x1",
            "    else:",
            "        first = x3",
            "else:",
            "    if x2 < x3:",
            "        first = x2",
            "    else:",
            "        first = x3",
            "print(first)"
        ],
        "response": {
            "message": "",
            "result": [
                {
                    "color": "white",
                    "text": "Alice"
                }
            ],
            "state": {
                "hints": [],
                "page_index": 20,
                "showEditor": true,
                "showSnoop": true,
                "step_index": 6
            }
        },
        "step": "min_three_exercise"
    }
]